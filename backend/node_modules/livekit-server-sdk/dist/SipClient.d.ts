import { SIPTrunkInfo, SIPDispatchRuleInfo, SIPParticipantInfo } from '@livekit/protocol';
import ServiceBase from './ServiceBase.js';
export interface CreateSipTrunkOptions {
    inbound_addresses?: string[];
    inbound_numbers?: string[];
    inbound_username?: string;
    inbound_password?: string;
    outbound_address?: string;
    outbound_username?: string;
    outbound_password?: string;
}
export interface SipDispatchRuleDirect {
    type: 'direct';
    roomName: string;
    pin?: string;
}
export interface SipDispatchRuleIndividual {
    type: 'individual';
    roomPrefix: string;
    pin?: string;
}
export interface CreateSipDispatchRuleOptions {
    trunkIds?: string[];
    hidePhoneNumber?: boolean;
}
export interface CreateSipParticipantOptions {
    participantIdentity?: string;
    participantName?: string;
    dtmf?: string;
    playRingtone?: boolean;
}
/**
 * Client to access Egress APIs
 */
export declare class SipClient extends ServiceBase {
    private readonly rpc;
    /**
     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
     */
    constructor(host: string, apiKey?: string, secret?: string);
    /**
     * @param number phone number of the trunk
     * @param opts CreateSipTrunkOptions
     */
    createSipTrunk(number: string, opts?: CreateSipTrunkOptions): Promise<SIPTrunkInfo>;
    listSipTrunk(): Promise<Array<SIPTrunkInfo>>;
    /**
     * @param sipTrunkId sip trunk to delete
     */
    deleteSipTrunk(sipTrunkId: string): Promise<SIPTrunkInfo>;
    /**
     * @param rule sip dispatch rule
     * @param opts CreateSipDispatchRuleOptions
     */
    createSipDispatchRule(rule: SipDispatchRuleDirect | SipDispatchRuleIndividual, opts?: CreateSipDispatchRuleOptions): Promise<SIPDispatchRuleInfo>;
    listSipDispatchRule(): Promise<Array<SIPDispatchRuleInfo>>;
    /**
     * @param sipDispatchRuleId sip trunk to delete
     */
    deleteSipDispatchRule(sipDispatchRuleId: string): Promise<SIPDispatchRuleInfo>;
    /**
     * @param sipTrunkId sip trunk to use for the call
     * @param number number to dial
     * @param roomName room to attach the call to
     * @param opts CreateSipParticipantOptions
     */
    createSipParticipant(sipTrunkId: string, number: string, roomName: string, opts?: CreateSipParticipantOptions): Promise<SIPParticipantInfo>;
}
